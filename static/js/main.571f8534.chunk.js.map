{"version":3,"sources":["store/todoSlice.js","store/index.js","components/NewTodoForm.jsx","components/TodoItem.jsx","components/TodoList.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["todoSlice","createSlice","name","initialState","todos","reducers","addTodo","state","action","push","id","Date","toISOString","text","payload","completed","toggleComplete","toggledTodo","find","todo","removeTodo","filter","actions","configureStore","reducer","todoReducer","NewTodoForm","value","updateText","handleAction","placeholer","onChange","e","target","onClick","TodoItem","dispatch","useDispatch","type","checked","TodoList","useSelector","map","App","useState","setText","className","trim","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"4OAEMA,EAAYC,YAAY,CAC1BC,KAAM,QACNC,aAAc,CACVC,MAAO,IAEXC,SAAU,CACNC,QAAO,SAACC,EAAOC,GACXD,EAAMH,MAAMK,KAAK,CACfC,IAAI,IAAIC,MAAOC,cACfC,KAAML,EAAOM,QAAQD,KACrBE,WAAW,GAEjB,EACAC,eAAc,SAACT,EAAOC,GAClB,IAAMS,EAAcV,EAAMH,MAAMc,MAAK,SAAAC,GAAI,OAAIA,EAAKT,KAAOF,EAAOM,QAAQJ,EAAE,IAC1EO,EAAYF,WAAaE,EAAYF,SACzC,EACAK,WAAU,SAACb,EAAOC,GACdD,EAAMH,MAAQG,EAAMH,MAAMiB,QAAO,SAAAF,GAAI,OAAIA,EAAKT,KAAOF,EAAOM,QAAQJ,EAAE,GAC1E,KAID,EAA8CV,EAAUsB,QAAjDhB,EAAO,EAAPA,QAASU,EAAc,EAAdA,eAAgBI,EAAU,EAAVA,WAExBpB,IAAiB,QCxBjBuB,cAAe,CAC5BC,QAAS,CACPpB,MAAOqB,K,uBCWIC,EAhBK,SAAH,GAA6C,IAAvCC,EAAK,EAALA,MAAOC,EAAU,EAAVA,WAAYC,EAAY,EAAZA,aACxC,OACE,mCACA,kCACE,uBACEC,WAAW,WACXH,MAAOA,EACPI,SAAU,SAACC,GAAC,OAAKJ,EAAWI,EAAEC,OAAON,MAAM,IAE7C,wBAAQO,QAASL,EAAa,0BAKpC,E,OCKeM,EAhBE,SAAH,GAAgC,IAA1BzB,EAAE,EAAFA,GAAIG,EAAI,EAAJA,KAAME,EAAS,EAATA,UACtBqB,EAAWC,cAEjB,OACE,+BACE,uBACEC,KAAK,WACLC,QAASxB,EACTgB,SAAU,kBAAMK,EAASpB,EAAe,CAAEN,OAAM,IAElD,+BAAOG,IACP,sBAAMqB,QAAS,kBAAME,EAAShB,EAAW,CAACV,OAAK,EAAC,oBAGtD,ECCe8B,EAfE,WACb,IAAMpC,EAAQqC,aAAY,SAAAlC,GAAK,OAAIA,EAAMH,MAAMA,KAAK,IAEtD,OACE,6BACGA,EAAMsC,KAAI,SAACvB,GAAI,OACd,cAAC,EAAQ,eAEHA,GADCA,EAAKT,GAEV,KAIV,E,MCiBeiC,MAvBf,WACE,MAAwBC,mBAAS,IAAG,mBAA7B/B,EAAI,KAAEgC,EAAO,KACdT,EAAWC,cASjB,OACE,sBAAKS,UAAU,MAAK,UAClB,cAAC,EAAW,CACVnB,MAAOd,EACPe,WAAYiB,EACZhB,aAZe,WAChBhB,EAAKkC,OAAOC,SACbZ,EAAS9B,EAAQ,CAACO,UAClBgC,EAAQ,IAEZ,IASI,cAAC,EAAQ,MAGf,ECnBeI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACV,GAEJ,ECDAQ,IAASC,OACP,cAAC,IAAMC,WAAU,UACf,cAAC,IAAQ,CAACC,MAAOA,EAAM,SACrB,cAAC,EAAG,QAGRC,SAASC,eAAe,SAM1Bd,G","file":"static/js/main.571f8534.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst todoSlice = createSlice({\n    name: 'todos',\n    initialState: {\n        todos: [],\n    },\n    reducers: {\n        addTodo(state, action) {\n            state.todos.push({\n              id: new Date().toISOString(),\n              text: action.payload.text,\n              completed: false,\n            });\n        },\n        toggleComplete(state, action) {\n            const toggledTodo = state.todos.find(todo => todo.id === action.payload.id);\n            toggledTodo.completed = !toggledTodo.completed;\n        },\n        removeTodo(state, action) {\n            state.todos = state.todos.filter(todo => todo.id !== action.payload.id);\n        }\n    },\n});\n\nexport const {addTodo, toggleComplete, removeTodo} = todoSlice.actions;\n\nexport default todoSlice.reducer;","import { configureStore } from '@reduxjs/toolkit';\nimport todoReducer from './todoSlice';\n\nexport default configureStore({\n  reducer: {\n    todos: todoReducer,\n  },\n});\n","const NewTodoForm = ({ value, updateText, handleAction }) => {\n  return (\n    <> \n    <label>\n      <input\n        placeholer='new todo'\n        value={value}\n        onChange={(e) => updateText(e.target.value)}\n      />\n      <button onClick={handleAction}>Add todo</button>\n    </label>\n    </>\n  \n  );\n};\n\nexport default NewTodoForm;\n","import { useDispatch } from 'react-redux';\nimport {toggleComplete, removeTodo} from '../store/todoSlice';\n\nconst TodoItem = ({ id, text, completed}) => {\n  const dispatch = useDispatch();\n\n  return (\n    <li>\n      <input\n        type='checkbox'\n        checked={completed}\n        onChange={() => dispatch(toggleComplete({ id }))}\n      />\n      <span>{text}</span>\n      <span onClick={() => dispatch(removeTodo({id}))}>&times;</span>\n    </li>    \n  );\n};\n\nexport default TodoItem;\n","import { useSelector } from 'react-redux';\nimport TodoItem from './TodoItem';\n\nconst TodoList = () => {\n    const todos = useSelector(state => state.todos.todos);\n\n  return (\n    <ul>\n      {todos.map((todo) => (\n        <TodoItem\n          key={todo.id}\n          {...todo}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default TodoList;\n","import {useState} from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { addTodo } from './store/todoSlice';\nimport NewTodoForm from './components/NewTodoForm';\nimport TodoList from './components/TodoList';\n\nimport './App.css';\n\n\nfunction App() {\n  const [text, setText] = useState('');\n  const dispatch = useDispatch();\n\n  const handleAction = () => {\n    if(text.trim().length) {\n      dispatch(addTodo({text}));\n      setText('');\n    }\n  }\n\n  return (\n    <div className='App'>\n      <NewTodoForm\n        value={text}\n        updateText={setText}\n        handleAction={handleAction}\n      />\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}